cinst yarn -> instala o yarn

yarn init -y -> cria o packge.json 
yarn add express -> instala o express como dependência de desenvolvimento
yarn add @types/express -D -> biblioteca de tipagem instalada no ambiente de desenvolvimento.
yarn add typescript -> instala o typescript no ambiente de desenvolvimento
yarn tsc --init -> inicia o typescript na aplicação
yarn add ts-node-dev -D -> complia typescript para javascript

Em package.json, criar um script que vai rodar a compilação do código
"scripts": {
	"start": "ts-node-dev --transpile-only --ignore-watch node-modules src/server.js"
}
--transpile-only -> deixa de fazer a checagem de tipagem. 
--ignore-watch node-modules -> ignora o que está acontecendo em node-modules

yarn start -> inicia o servidor

*Navegadores trabalham apenas com método GET*
O insomnia é um simulador de cliente, ele vai consumir a API e verificar se todas as rotas e funções estão corretas. 
Dentro do Insomnia, criar uma Base Enviroment: No Environment - Manager Environment - Base Environment
{
  "baseURL": "http://localhost:3333"
}

Dia 02
Podemos nos comunicar de três formas com o banco de dadods. 
	- Por meio do driver do banco de dados.
	- Query Bielders (knex) 
	- ORM (TypeORM, Sequelize)
		- O TypeORM trabalha muito bem com o TypeScript
		- Basta mudar o driver para mudar o banco (sem mudar as querys).

	Instalando o TypeORM 
		yarn add typeorm reflect-metadata 
	Instalando o Banco de Dados
		yarn add sqlite3

	Criar um ORM Config (na raiz)
		{
    			"type": "sqlite",
    			"database":"./src/database/database.sqlite"
		}

	Criar uma pasta chamada database, dentro de src e dentro dela criar um index.ts
		import { createConnection } from "typeorm"; 
		createConnection()
	
	Em server.ts 
		import 'reflect-metadata'
		import './database/'

	Comando para rodar as migrations:
		dentro de package.json
		"scripts"{
			"typeorm": "ts-node-dev node_modules/typeorm/cli.js"	
		}
		
	Dentro da pasta database, criar uma pasa chamada migrations (ela vai armazenar as migrations)
		Cria uma migration 
		yarn typeorm migration:create -n CreateUsers

		Roda a migration
		yarn typeorm migration:run

		Desfaz a última migration
		yarn typeorm migration:revert

	Informar em ORMConfig a migration que deve ser executada. 
		{
    			"type": "sqlite",
    			"database":"./src/database/database.sqlite",
    			"migrations": ["./src/database/migrations/**.ts"],
    			"cli": {
        			"migrationsDir": "./src/database/migrations"
    			}
		}


	Beekeeper: permite testar o banco de dados. 

	Criar uma pasta controllers dentro de SRC
		o Controller é responsável por cuidar das funcionalidades desenvolvidas para o sistema e o server chama o controller. 
	
	Adiciona a biblioteca uuid, que será responsável por criar o id. 
		yarn add uuid
		yarn uuid @types/uuid -D 

















 
